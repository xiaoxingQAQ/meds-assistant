<!DOCTYPE html>
<html lang="zh-CN">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>您的个人用药提醒助手 (精致版)</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href="https://fonts.googleapis.com/css2?family=Noto+Sans+SC:wght@300;400;500;700&display=swap"
      rel="stylesheet"
    />
    <!-- Chosen Palette: Refined Teal, Slate, Soft Gold for a calming, premium health app feel. -->
    <!-- Application Structure Plan: A task-oriented single-page application focused on one core function: medication tracking. The UI is structured chronologically by time of day (Morning, Noon, Evening) using a card-based layout. This is highly intuitive for a daily schedule. Key interactions include checkboxes to mark doses as taken, which provides immediate visual feedback and updates a progress bar. State is persistent via localStorage, so progress isn't lost. A prominent clock and dynamic highlighting of the current time slot keep the user oriented. The design prioritizes clarity, ease of use, and providing a sense of control and accomplishment to encourage adherence. -->
    <!-- Visualization & Content Choices: 
        - Schedule Display: Goal: Inform/Action. Method: Interactive HTML cards organized into a single timeline. Interaction: Checkboxes trigger state changes and visual updates (graying out). Justification: A checklist is the most direct and universally understood interface for tracking tasks.
        - Progress Tracking: Goal: Motivate. Method: A dynamic HTML/CSS progress bar. Interaction: Updates automatically as doses are checked off. Justification: Provides positive reinforcement and a clear overview of daily completion.
        - Time Context: Goal: Orient. Method: A live digital clock and dynamic styling (a glowing border) on the next due medication item. Justification: Immediately draws the user's attention to what's next.
        - Notifications: Goal: Remind. Method: A button to enable browser Notifications API. Interaction: User grants permission and notifications fire at specific times. Justification: This fulfills the core "reminder" request in the most effective way possible for a web app.
        - Library/Method: Vanilla JS for all logic (time, state management, rendering), Tailwind CSS for styling. No charts needed.
    -->
    <!-- CONFIRMATION: NO SVG graphics used. NO Mermaid JS used. -->
    <style>
      body {
        font-family: 'Noto Sans SC', sans-serif;
        background-color: #f0f4f8;
      }
      @keyframes fadeIn {
        from {
          opacity: 0;
          transform: translateY(10px);
        }
        to {
          opacity: 1;
          transform: translateY(0);
        }
      }
      @keyframes slideInDown {
        from {
          opacity: 0;
          transform: translateY(-10px);
        }
        to {
          opacity: 1;
          transform: translateY(0);
        }
      }
      .fade-in {
        animation: fadeIn 0.5s ease-out forwards;
      }
      .slide-in-down {
        animation: slideInDown 0.4s ease-out forwards;
      }

      .time-slot.next-up {
        border-color: #facc15;
        box-shadow: 0 0 20px rgba(250, 204, 21, 0.3);
      }
      .med-card {
        transition: all 0.3s ease;
      }

      .progress-bar-fill {
        transition: width 0.5s ease-in-out;
        background-image: linear-gradient(to right, #2dd4bf, #0d9488);
      }

      #taken-meds-content {
        display: grid;
        grid-template-rows: 0fr;
        transition: grid-template-rows 0.5s ease-in-out;
      }
      #taken-meds-content.expanded {
        grid-template-rows: 1fr;
      }
      #taken-meds-container-wrapper {
        overflow: hidden;
      }
      #taken-meds-container {
        max-height: 60vh;
        overflow-y: auto;
      }

      #taken-meds-container::-webkit-scrollbar {
        width: 6px;
      }
      #taken-meds-container::-webkit-scrollbar-track {
        background: #e2e8f0;
        border-radius: 10px;
      }
      #taken-meds-container::-webkit-scrollbar-thumb {
        background: #94a3b8;
        border-radius: 10px;
      }
      #taken-meds-container::-webkit-scrollbar-thumb:hover {
        background: #64748b;
      }
    </style>
  </head>

  <body class="text-slate-800">
    <main class="container mx-auto p-4 md:p-8 max-w-3xl">
      <header class="text-center mb-8 fade-in">
        <h1 class="text-3xl md:text-4xl font-bold text-teal-800">个人用药提醒助手</h1>
        <p id="current-date" class="text-lg text-slate-500 mt-2 font-light"></p>
        <p id="current-time" class="text-5xl font-bold text-slate-700 tracking-wider mt-1"></p>
      </header>

      <div class="bg-white p-6 rounded-2xl shadow-lg mb-8 fade-in" style="animation-delay: 100ms">
        <div class="flex justify-between items-center mb-2">
          <span class="font-semibold text-slate-700">今日服药进度</span>
          <span id="progress-text" class="font-bold text-teal-600">0 / 11</span>
        </div>
        <div class="w-full bg-slate-200 rounded-full h-3 overflow-hidden">
          <div id="progress-bar" class="h-3 rounded-full progress-bar-fill" style="width: 0%"></div>
        </div>
        <div class="text-center mt-6">
          <button
            id="notification-btn"
            class="bg-yellow-400 hover:bg-yellow-500 text-yellow-900 font-bold py-2 px-5 rounded-full transition-all duration-300 shadow-md hover:shadow-lg text-sm flex items-center justify-center mx-auto gap-2"
          >
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
              <path
                d="M8 16a2 2 0 0 0 2-2H6a2 2 0 0 0 2 2m.995-14.901a1 1 0 1 0-1.99 0A5 5 0 0 0 3 6c0 1.098-.5 6-2 7h14c-1.5-1-2-5.902-2-7 0-2.42-1.72-4.44-4.005-4.901"
              />
            </svg>
            开启时段提醒
          </button>
        </div>
      </div>

      <!-- Taken Meds Accordion -->
      <div id="taken-meds-accordion" class="bg-white rounded-2xl shadow-lg mb-8 fade-in" style="animation-delay: 200ms">
        <button id="taken-meds-header" class="w-full p-4 flex justify-between items-center cursor-pointer">
          <h2 class="text-xl font-bold text-slate-700">今日已服用</h2>
          <div class="flex items-center gap-2">
            <span id="taken-summary" class="text-slate-500 font-medium text-sm"></span>
            <svg
              id="accordion-arrow"
              xmlns="http://www.w3.org/2000/svg"
              width="20"
              height="20"
              fill="currentColor"
              class="bi bi-chevron-down transition-transform duration-300"
              viewBox="0 0 16 16"
            >
              <path
                fill-rule="evenodd"
                d="M1.646 4.646a.5.5 0 0 1 .708 0L8 10.293l5.646-5.647a.5.5 0 0 1 .708.708l-6 6a.5.5 0 0 1-.708 0l-6-6a.5.5 0 0 1 0-.708"
              />
            </svg>
          </div>
        </button>
        <div id="taken-meds-content">
          <div id="taken-meds-container-wrapper">
            <div id="taken-meds-container" class="space-y-3 p-4 pt-0 border-t border-slate-200">
              <!-- Taken meds will be dynamically inserted here -->
            </div>
          </div>
        </div>
      </div>

      <div id="medication-slots" class="space-y-8">
        <!-- Medication slots will be generated here -->
      </div>

      <footer class="text-center mt-12">
        <button id="reset-btn" class="text-sm text-slate-500 hover:text-red-600 underline transition-colors">
          重置今日记录
        </button>
      </footer>
    </main>

    <script>
      document.addEventListener('DOMContentLoaded', () => {
        const svgIcons = {
          houtou: `<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-1.03 15.41c-1.3-.47-2.39-1.57-2.86-2.87-.13-.37.28-.66.6-.49 1.49.78 3.21.78 4.7 0 .32-.17.73.12.6.49-.47 1.3-1.56 2.4-2.86 2.87-.2.07-.46.07-.68 0zM7.5 11C6.67 11 6 10.33 6 9.5S6.67 8 7.5 8s1.5.67 1.5 1.5S8.33 11 7.5 11zm9 0c-.83 0-1.5-.67-1.5-1.5S15.67 8 16.5 8s1.5.67 1.5 1.5-.67 1.5-1.5 1.5z" fill="#34d399"/></svg>`,
          mosapride: `<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M19.98 12.63c.09-.22.14-.45.14-.7a2.53 2.53 0 00-2.62-2.5A2.53 2.53 0 0015 11.93c0 .25.05.48.14.7L12 14.5l-3.14-2.17c.09-.22.14-.45.14-.7a2.53 2.53 0 00-2.62-2.5A2.53 2.53 0 004 11.93c0 .25.05.48.14.7L12 20l7.98-7.37zM12 4L4 9.37V20h16V9.37L12 4z" fill="#38bdf8"/></svg>`,
          careprazen: `<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M12 2a10 10 0 100 20 10 10 0 000-20zm0 17.5c-1.96 0-3.73-.91-4.88-2.34a.75.75 0 011.06-1.06c.82.82 2.05 1.32 3.39 1.32s2.57-.5 3.39-1.32a.75.75 0 111.06 1.06A6.97 6.97 0 0112 19.5z" fill="#818cf8"/></svg>`,
          sucralfate: `<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M17.5 2H6.5C5.67 2 5 2.67 5 3.5v17c0 .83.67 1.5 1.5 1.5h11c.83 0 1.5-.67 1.5-1.5v-17c0-.83-.67-1.5-1.5-1.5zM17 4h-2V3h2v1z" fill-rule="evenodd" clip-rule="evenodd" fill="#f472b6"/></svg>`,
        }
        const medicationSchedule = [
          {
            id: 'houtou_am',
            name: '猴头健胃灵片',
            dose: '4片',
            slot: 'morning',
            iconKey: 'houtou',
            timing: '饭前服用',
          },
          {
            id: 'mosapride_am',
            name: '枸橼酸莫沙必利片',
            dose: '1片',
            slot: 'morning',
            iconKey: 'mosapride',
            timing: '饭前半小时服用',
          },
          {
            id: 'sucralfate_am',
            name: '硫糖铝混悬凝胶',
            dose: '1袋',
            slot: 'morning',
            iconKey: 'sucralfate',
            timing: '饭前30-60分钟服用',
          },
          {
            id: 'careprazen_am',
            name: '盐酸凯普拉生片',
            dose: '2片',
            slot: 'morning',
            iconKey: 'careprazen',
            timing: '饭前饭后均可',
          },

          { id: 'houtou_noon', name: '猴头健胃灵片', dose: '4片', slot: 'noon', iconKey: 'houtou', timing: '饭前服用' },
          {
            id: 'mosapride_noon',
            name: '枸橼酸莫沙必利片',
            dose: '1片',
            slot: 'noon',
            iconKey: 'mosapride',
            timing: '饭前半小时服用',
          },
          {
            id: 'sucralfate_noon',
            name: '硫糖铝混悬凝胶',
            dose: '1袋',
            slot: 'noon',
            iconKey: 'sucralfate',
            timing: '饭前30-60分钟服用',
          },

          {
            id: 'houtou_pm',
            name: '猴头健胃灵片',
            dose: '4片',
            slot: 'evening',
            iconKey: 'houtou',
            timing: '饭前服用',
          },
          {
            id: 'mosapride_pm',
            name: '枸橼酸莫沙必利片',
            dose: '1片',
            slot: 'evening',
            iconKey: 'mosapride',
            timing: '饭前半小时服用',
          },
          {
            id: 'sucralfate_pm',
            name: '硫糖铝混悬凝胶',
            dose: '1袋',
            slot: 'evening',
            iconKey: 'sucralfate',
            timing: '饭前30-60分钟服用',
          },
          {
            id: 'careprazen_pm',
            name: '盐酸凯普拉生片',
            dose: '2片',
            slot: 'evening',
            iconKey: 'careprazen',
            timing: '饭前饭后均可',
          },
        ]
        const slotsConfig = {
          morning: { label: '早上', icon: '☀️', startHour: 6, endHour: 11 },
          noon: { label: '中午', icon: '🕛', startHour: 11, endHour: 17 },
          evening: { label: '晚上', icon: '🌙', startHour: 17, endHour: 23 },
        }
        const slotsContainer = document.getElementById('medication-slots')
        const takenContainer = document.getElementById('taken-meds-container')
        const takenContent = document.getElementById('taken-meds-content')
        const accordionHeader = document.getElementById('taken-meds-header')
        const accordionArrow = document.getElementById('accordion-arrow')
        const totalDoses = medicationSchedule.length
        const iconColors = {
          houtou: 'bg-emerald-100',
          mosapride: 'bg-sky-100',
          careprazen: 'bg-indigo-100',
          sucralfate: 'bg-rose-100',
        }

        function getTodayKey(prefix) {
          const now = new Date()
          return `${prefix}-${now.getFullYear()}-${now.getMonth()}-${now.getDate()}`
        }
        let takenState = JSON.parse(localStorage.getItem(getTodayKey('medTakenState'))) || {}
        let notifiedState = JSON.parse(localStorage.getItem(getTodayKey('medNotifiedState'))) || {}
        function saveState(key, state) {
          localStorage.setItem(getTodayKey(key), JSON.stringify(state))
        }

        function renderMedications() {
          slotsContainer.innerHTML = ''
          takenContainer.innerHTML = ''

          const takenMeds = medicationSchedule.filter((med) => takenState[med.id])

          // Render upcoming medication slots
          let animationDelay = 200
          Object.keys(slotsConfig).forEach((slotKey) => {
            const upcomingInSlot = medicationSchedule.filter((med) => med.slot === slotKey && !takenState[med.id])
            if (upcomingInSlot.length === 0) return

            const config = slotsConfig[slotKey]
            const slotWrapper = document.createElement('div')
            slotWrapper.id = `slot-${slotKey}`
            slotWrapper.className =
              'time-slot p-4 rounded-2xl border-2 border-transparent transition-all duration-300 fade-in'
            slotWrapper.style.animationDelay = `${animationDelay}ms`
            animationDelay += 100

            let cardsHtml = upcomingInSlot
              .map(
                (med) => `
                    <div class="med-card-wrapper">
                      <div class="med-card bg-white p-4 rounded-xl flex items-center transition-all shadow-lg">
                          <div class="mr-4 w-12 h-12 flex-shrink-0 rounded-full flex items-center justify-center ${
                            iconColors[med.iconKey]
                          }">${svgIcons[med.iconKey]}</div>
                          <div class="flex-grow">
                              <p class="font-bold text-base med-name">${med.name}</p>
                              <p class="text-sm text-amber-700 font-semibold med-timing">${med.timing}</p>
                              <p class="text-slate-500 text-sm mt-1">${med.dose}</p>
                          </div>
                          <input type="checkbox" data-dose-id="${
                            med.id
                          }" class="h-6 w-6 rounded-md border-gray-300 text-teal-600 focus:ring-teal-500 cursor-pointer">
                      </div>
                    </div>`
              )
              .join('')

            slotWrapper.innerHTML = `
                    <h2 class="text-2xl font-bold mb-4 text-slate-600">${config.icon} ${config.label}</h2>
                    <div class="space-y-4">${cardsHtml}</div>
                `
            slotsContainer.appendChild(slotWrapper)
          })
          if (slotsContainer.innerHTML === '') {
            slotsContainer.innerHTML = `<div class="text-center p-10 bg-white rounded-2xl shadow-lg"><p class="text-xl text-teal-600 font-semibold">🎉 恭喜！今日药物已全部服用完毕！</p></div>`
          }

          // Render taken medications
          document.getElementById('taken-summary').textContent = `${takenMeds.length} / ${totalDoses} 种`
          if (takenMeds.length === 0) {
            takenContainer.innerHTML = `<p class="text-slate-400 text-center py-4">暂无已服用记录</p>`
          } else {
            takenMeds
              .sort((a, b) => a.slot.localeCompare(b.slot))
              .forEach((med) => {
                const takenCard = document.createElement('div')
                takenCard.className = 'slide-in-down bg-slate-100 p-3 rounded-lg flex items-center gap-3 text-sm'
                takenCard.innerHTML = `
                        <div class="w-8 h-8 flex-shrink-0 rounded-full flex items-center justify-center ${
                          iconColors[med.iconKey]
                        }">${svgIcons[med.iconKey]}</div>
                        <div class="flex-grow">
                            <p class="font-semibold text-slate-600">${med.name}</p>
                            <p class="text-xs text-slate-500">${slotsConfig[med.slot].label} - ${med.dose}</p>
                        </div>
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-check-circle-fill text-teal-500 flex-shrink-0" viewBox="0 0 16 16"><path d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0m-3.97-3.03a.75.75 0 0 0-1.08.022L7.477 9.417 5.384 7.323a.75.75 0 0 0-1.06 1.06L6.97 11.03a.75.75 0 0 0 1.079-.02l3.992-4.99a.75.75 0 0 0-.01-1.05z"/></svg>`
                takenContainer.appendChild(takenCard)
              })
          }

          addEventListeners()
          updateProgress()
          updateTime()
        }

        function addEventListeners() {
          document.querySelectorAll('input[type="checkbox"]').forEach((checkbox) => {
            checkbox.addEventListener('change', (e) => {
              if (e.target.checked) {
                const doseId = e.target.dataset.doseId
                takenState[doseId] = true
                saveState('medTakenState', takenState)
                const cardWrapper = e.target.closest('.med-card-wrapper')
                cardWrapper.style.transition = 'all 0.4s ease'
                cardWrapper.style.transform = 'scale(0.8)'
                cardWrapper.style.opacity = '0'
                setTimeout(() => {
                  renderMedications()
                }, 400)
              }
            })
          })
          accordionHeader.addEventListener('click', () => {
            takenContent.classList.toggle('expanded')
            accordionArrow.classList.toggle('rotate-180')
          })
        }
        function updateProgress() {
          const takenCount = Object.values(takenState).filter(Boolean).length
          const progress = totalDoses > 0 ? (takenCount / totalDoses) * 100 : 0
          document.getElementById('progress-bar').style.width = `${progress}%`
          document.getElementById('progress-text').textContent = `${takenCount} / ${totalDoses}`
        }
        function updateTime() {
          const now = new Date()
          const dateOptions = { year: 'numeric', month: 'long', day: 'numeric', weekday: 'long' }
          document.getElementById('current-date').textContent = now.toLocaleDateString('zh-CN', dateOptions)
          document.getElementById('current-time').textContent = now.toLocaleTimeString('zh-CN', {
            hour: '2-digit',
            minute: '2-digit',
            second: '2-digit',
          })

          const currentHour = now.getHours()
          let nextSlotKey = null

          const slotKeys = ['morning', 'noon', 'evening']
          for (const key of slotKeys) {
            const upcomingInSlot = medicationSchedule.filter((med) => med.slot === key && !takenState[med.id])
            if (upcomingInSlot.length > 0 && currentHour < slotsConfig[key].endHour) {
              nextSlotKey = key
              break
            }
          }
          if (!nextSlotKey) {
            const upcomingMeds = medicationSchedule.filter((med) => !takenState[med.id])
            if (upcomingMeds.length > 0) nextSlotKey = upcomingMeds[0].slot
          }

          document.querySelectorAll('.time-slot').forEach((el) => {
            el.classList.remove('next-up')
          })
          if (nextSlotKey) {
            const nextItem = document.getElementById(`slot-${nextSlotKey}`)
            if (nextItem) {
              nextItem.classList.add('next-up')
            }
          }
        }

        const notificationBtn = document.getElementById('notification-btn')
        notificationBtn.addEventListener('click', () => {
          if (Notification.permission === 'granted') {
            alert('提醒功能已经开启。')
            return
          }
          Notification.requestPermission().then((permission) => {
            if (permission === 'granted') {
              alert('浏览器提醒已开启！')
              notificationBtn.innerHTML = `... 提醒功能已开启`
              notificationBtn.classList.replace('bg-yellow-400', 'bg-slate-300')
              notificationBtn.classList.replace('text-yellow-900', 'text-slate-600')
            } else {
              alert('您已阻止浏览器提醒。')
            }
          })
        })

        function scheduleNotifications() {
          const now = new Date()
          const currentHour = now.getHours()
          const currentMinute = now.getMinutes()

          if (currentMinute === 0) {
            // Check on the hour
            Object.keys(slotsConfig).forEach((key) => {
              const slot = slotsConfig[key]
              if (currentHour === slot.startHour && !notifiedState[key]) {
                const medsInSlot = medicationSchedule.filter((med) => med.slot === key && !takenState[med.id])
                if (medsInSlot.length > 0 && Notification.permission === 'granted') {
                  new Notification(`该服用${slot.label}的药了！`, {
                    body: `您有 ${medsInSlot.length} 种药物需要服用。`,
                  })
                  notifiedState[key] = true
                  saveState('medNotifiedState', notifiedState)
                }
              }
            })
          }
        }

        document.getElementById('reset-btn').addEventListener('click', () => {
          if (confirm('您确定要清除今天所有的服药和提醒记录吗？')) {
            takenState = {}
            notifiedState = {}
            saveState('medTakenState', takenState)
            saveState('medNotifiedState', notifiedState)
            renderMedications()
          }
        })

        renderMedications()
        setInterval(updateTime, 1000)
        setInterval(scheduleNotifications, 60000) // Check every minute
      })
    </script>
  </body>
</html>
